@page "/colours/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]


<h3 class="card-title">Car Colours</h3>
@if (colours == null)
{
	<div class="alert alert-info">Loading colours...</div>
}
else
{
	<table class="table table-responsive">
		<thead>
			<tr>
				<th>Name</th>
				<th>Actions</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var colour in colours)
			{
				<tr>
					<td>@colour.Name</td>
					<td>
						<a href="/colours/view/@colour.Id" class="btn btn-primary">
							<span class="oi oi-book"></span>
						</a>
						<a href="/colours/edit/@colour.Id" class="btn btn-warning">
							<span class="oi oi-pencil"></span>
						</a>
						<button class="btn btn-danger" @onclick="@(()=>Delete(colour.Id))">
							<span class="oi oi-delete"></span>
						</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
}
		
<br/>

@code {
	private List<Colour>? colours;

	protected async override Task OnInitializedAsync()
	{
		colours = await _client.GetFromJsonAsync<List<Colour>>($"{Endpoints.ColoursEndpoint}");
	}

	async Task Delete(int colourID)
	{
		if (colours != null)
		{
			var colour = colours.First(q => q.Id == colourID);
			var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {colour.Name}?");
			if (confirm)
			{
				await _client.DeleteAsync($"{Endpoints.ColoursEndpoint}/{colourID}");
				await OnInitializedAsync();
			}
		}
	}

}
